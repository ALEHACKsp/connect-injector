<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.2.1" created="2012-01-31 00:38" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>Neyeon .COM</title>
	<link>http://neyeon.com</link>
	<description>Keeping it simple</description>
	<pubDate>Tue, 31 Jan 2012 00:38:01 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://neyeon.com</wp:base_site_url>
	<wp:base_blog_url>http://neyeon.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>D.Luecke</wp:author_login><wp:author_email>daff@neyeon.de</wp:author_email><wp:author_display_name><![CDATA[Daff]]></wp:author_display_name><wp:author_first_name><![CDATA[David]]></wp:author_first_name><wp:author_last_name><![CDATA[Luecke]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.2.1</generator>

	<item>
		<title>jQuery Plugin: Documentation</title>
		<link>http://neyeon.com/2010/12/documenting-jquery-plugins/</link>
		<pubDate>Fri, 10 Dec 2010 16:00:21 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[There are many good tutorials on how to <a title="jQuery Plugin Authoring Main Page" href="http://docs.jquery.com/Plugins/Authoring" target="_blank">write your own jQuery plugin</a>, but still each plugin has it's own way of providing documentation. This may also be, because JavaScript in general doesn't have a widely accepted way of documenting source code as it is the case with e.g. JavaDoc for Java.

Coming from a Java background, I like the idea of maintaining both, source code and documentation together, especially if you are working on an open source project where good documentation is one of the keys to make the project accessible to developers. <a title="The State Of JavaScript Documentation Tools" href="http://metajack.wordpress.com/2008/07/01/the-state-of-javascript-documentation-tools/" target="_blank">The State Of JavaScript Documentation Tools</a> sums up the ways of documenting JavaScript very well and as suggested there (since not much happened since it was written two years ago) I went with <a title="Naturaldocs" href="http://www.naturaldocs.org/" target="_blank">NaturalDocs</a> amongst others because other tools like JSDoc already failed by parsing the standard method of wrapping your plugin code in an anonymous function.

So lets jump right into the NaturalDocs documentation of a simple jQuery Plugin:

[sourcecode language="javascript"]
/**
 * Title: A simple jQuery plugin
 * This plugin demonstrates the use of the &lt;Naturaldocs at http://naturaldocs.org&gt;
 * tool.
 *
 * Usage:
 *
 * (start code)
 * 	$(&quot;#mydiv&quot;).myplugin(&quot;Hello World&quot;, { &quot;id&quot; : &quot;helloworlddiv&quot; });
 * (end)
 *
 * See the &lt;myplugin&gt; documentation page for a full description.
 */

(function($) {
	/**
	 * section: Default Options
	 *
	 * Default options the plugin is initialized with
	 */
	$.myplugin = {
		defaults :
		{
			/**
			 * var: class
			 *
			 * The default class that will be added to
			 * elements that myplugin has been called on.
			 */
			&quot;class&quot; : &quot;myplugin&quot;,
			/**
			 * var: id
			 *
			 * The default id that will be added to
			 * elements that myplugin has been called on.
			 */
			&quot;id&quot; : &quot;mypluginid&quot;,
		}
	};

	/**
	 * section: Plugin functions
	 *
	 * jQuery plugin functions available
	 */
	$.fn.extend(
	{
		/**
		 * function: myplugin
		 *
		 * Adds some attributes to an element and sets its html
		 * content.
		 *
		 * Parameters:
		 * 	text - The text to set as the html content
		 * 	options - Options for the function
		 *
		 * Returns:
		 * 	The jQuery element this function has been called on
		 */
		myplugin : function(text, attributes)
		{
			var options = $.extend($.myplugin.defaults, attributes);
			$(this).attr(options);
			$(this).html(text);
			return $(this);
		}
	});
})(jQuery);
[/sourcecode]

To create the HTML documentation go into your jquery plugin folder (where your source files are) and create a folder called <em>docs</em> and another one called <em>docdata</em>, then run:
<blockquote>&lt;NaturalDocs&gt; -i . -o HTML docs -p docdata</blockquote>
Where &lt;NaturalDocs&gt; is your NaturalDocs installation (in Ubuntu easily done by <em>sudo apt-get install naturaldocs</em> and then running the NaturalDocs command).

In the docs folder you will now find the <a title="Myplugin documentation" href="http://neyeon.com/t/myplugin" target="_blank">generated documentation</a>.

As an example, the <a title="Jquery dform plugin documentation" href="http://neyeon.com/p/jquery.dform/">documentation for the jQuery.dForm plugin</a> has been entirely generated using NaturalDocs.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2010-12-10 16:00:21</wp:post_date>
		<wp:post_date_gmt>2010-12-10 16:00:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>documenting-jquery-plugins</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="documentation"><![CDATA[documentation]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[188659611]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[102]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>31</wp:comment_id>
			<wp:comment_author><![CDATA[Kurt]]></wp:comment_author>
			<wp:comment_author_email>kurt.gooding@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-12-22 20:34:00</wp:comment_date>
			<wp:comment_date_gmt>2011-12-22 20:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks, this was helpful.

This may help others, I had to install perl as I got the following error:

'perl' is not reconized as an internal or external command, operable program or batch file.


I downloaded it here:

http://www.activestate.com/activeperl/downloads]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[392550835]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Graceful degradation - grow a mustache</title>
		<link>http://neyeon.com/?p=14</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[// TODO]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2010-11-17 22:51:45</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Helpers are a code smell</title>
		<link>http://neyeon.com/?p=17</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2010-11-27 17:40:35</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Keeping it simple</title>
		<link>http://neyeon.com/2010/12/keeping-it-simple/</link>
		<pubDate>Tue, 07 Dec 2010 21:50:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[After abandoning my <a title="daff.neyeon-digital.de" href="http://daff.neyeon-digital.de" target="_blank">old blog</a> two years ago it was about time of having a new playground for my programming endeavors.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2010-12-07 21:50:00</wp:post_date>
		<wp:post_date_gmt>2010-12-07 21:50:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>keeping-it-simple</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="meta"><![CDATA[Meta]]></category>
		<category domain="category" nicename="meta"><![CDATA[Meta]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[76]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[186626728]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Creating forms in JSON with jQuery</title>
		<link>http://neyeon.com/2011/01/creating-forms-with-json-and-jquery/</link>
		<pubDate>Thu, 06 Jan 2011 20:11:55 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[Creating and managing HTML forms is probably one of the most tedious and in many web applications also the most important part of the frontend development process. Forms generated in a web application usually need to contain information on how they bind to domain objects, errors that occurred during processing and the values of different fields. Because maintaining all these information manually is very error prone and requires writing a lot of repetitive markup there are different approaches that support developers in this task:
<ul>
	<li><strong>Declarative:</strong> The framework supports custom tags that create form elements with all the information it needs to process that form (e.g. the JSTL <a title="Spring Form Taglib" href="http://static.springsource.org/spring/docs/2.0.x/reference/spring-form.tld.html" target="_blank">Spring Form</a> taglib)</li>
	<li><strong>Helper: </strong>In a view script the framework offers helper functions you can call which return a new form element (e.g. <a title="Ruby on rails" href="http://guides.rubyonrails.org/form_helpers.html" target="_blank">Ruby on Rails</a>)</li>
	<li><strong>Programmatic:</strong> Forms are created programatically in the frameworks programming language (e.g. <a title="Google Web Toolkit" href="http://code.google.com/webtoolkit/" target="_blank">GWT</a>, the <a href="http://www.sencha.com/products/js/" target="_blank">Sencha ExtJS Forms</a> or <a title="Zend Form" href="http://framework.zend.com/manual/en/zend.form.html" target="_blank">Zend Form</a>)</li>
	<li><strong>GUI based</strong>: The form is created in a graphical user interface via Drag and Drop  (e.g. the just started <a title="jQuery Form Builder blog entry" href="http://limcheekin.blogspot.com/2011/01/kick-off-jquery-form-builder-plugin.html" target="_blank">jQuery Form Builder</a> project or ASP.NET web forms)</li>
</ul>
With web applications becoming more JavaScript heavy these approaches now not only have to generate HTML, but also have to take care of creating the appropriate JavaScript source code which often leads to an ugly mix of HTML, client side logic and server side logic.

One solution for that problem is the separation of HTML markup generation from the actual form definition, where the definition is available in a more abstract but easy to process format (like <a title="JavaScript Object Notation" href="http://json.org" target="_blank">JSON</a>). If a web application is already relying on JavaScript, the next step is then to let the client itself create the form from that definition.

Inspired by the programmatic approach and the fact that there <a title="Stackoverflow question about client side form builder" href="http://stackoverflow.com/questions/1074662/form-builder-like-zend-form-html-or-extjs-form-for-jquery" target="_blank">doesn't seem to be any jQuery plugin for this</a> I started the <a title="jQuery dForm homepage" href="http://neyeon.com/p/jquery.dform/" target="_blank">jQuery dForm</a> plugin (currently version 0.1.2). The ideas behind it:
<ul>
	<li>Use JSON (or XML) as the form definition format. Easy to generate (e.g. automatically from your domain model) and flexible enough so that it can still be used to generate forms on the server side.</li>
	<li><a title="jQuery dForm documentation extension chapter" href="http://neyeon.com/p/jquery.dform/doc/files/dform-extensions-js.html" target="_blank">Easily extensible</a>: Possibility to support other plugins, your own jQuery powered form elements or improving existing ones</li>
	<li><a title="jQuery dForm existing plugin support" href="http://neyeon.com/p/jquery.dform/doc/files/dform-extensions-js.html#jQuery_UI" target="_blank">Don't reinvent the wheel</a>: Add support for existing plugins like <a title="jQuery UI homepage" href="http://jqueryui.com" target="_blank">jQuery UI</a>, the <a title="Validation plugin homepage" href="http://bassistance.de/jquery-plugins/jquery-plugin-validation/" target="_blank">Validation Plugin</a> or the <a title="jQuery form plugin" href="http://jquery.malsup.com/form/">jQuery Form plugin</a> and keep the plugin itself as compact as possible.</li>
</ul>
The basic example to use the plugin looks like this:

[source lang="javascript"]
&lt;script type=&quot;text/javascript&quot;&gt;
var formdata = {
	&quot;action&quot; : &quot;index.html&quot;,
	&quot;method&quot; : &quot;get&quot;,
	&quot;elements&quot; :
	[
		{
			&quot;type&quot; : &quot;p&quot;,
			&quot;html&quot; : &quot;You must login&quot;
		},
		{
			&quot;name&quot; : &quot;username&quot;,
			&quot;id&quot; : &quot;txt-username&quot;,
			&quot;caption&quot; : &quot;Username&quot;,
			&quot;type&quot; : &quot;text&quot;,
			&quot;placeholder&quot; : &quot;E.g. user@example.com&quot;
		},
		{
			&quot;name&quot; : &quot;password&quot;,
			&quot;caption&quot; : &quot;Password&quot;,
			&quot;type&quot; : &quot;password&quot;
		},
		{
			&quot;type&quot; : &quot;submit&quot;,
			&quot;value&quot; : &quot;Login&quot;
		}
	]
};

$(&quot;#myform&quot;).buildForm(formdata);

// Or if the content of formdata can be loaded from a URL
// $(&quot;#myform&quot;).buildForm(&quot;http://example.com/myform.json&quot;);
&lt;/script&gt;

&lt;form id=&quot;myform&quot;&gt;&lt;/form&gt;
[/source]

And the result (the only JavaScript enhancement here is the placeholder):

<a href="http://neyeon.com/wp-content/uploads/2011/01/form.png"><img class="size-medium wp-image-117  alignnone" title="Generated form" src="http://neyeon.com/wp-content/uploads/2011/01/form-300x210.png" alt="dForm generated form image" width="300" height="210" /></a>

The advantage is, that the form definition and the configuration of JavaScript functionality can be kept in the same format. Check out the <a title="jQuery dForm examples" href="http://neyeon.com/p/jquery.dform/doc/files2/examples-txt.html" target="_blank">examples page</a> for more complex forms and some jQuery UI and the <a title="dForm extension" href="http://neyeon.com/p/jquery.dform/doc/files/dform-extensions-js.html" target="_blank">extension chapter</a> to see how to customize and extend your forms.

Worth mentioning: Since JSON (or XML for that matter) are quite abstract formats and the form generation itself is done by the client, an extension for generating browser specific HTML5 forms is currently under development.

If you have questions or want to contribute (e.g. by adding dForm support to your own form related plugin :) visit the plugin homepage <a title="dForm github project page" href="https://github.com/daffl/jquery.dform/" target="_blank">on GitHub</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2011-01-06 20:11:55</wp:post_date>
		<wp:post_date_gmt>2011-01-06 20:11:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>creating-forms-with-json-and-jquery</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="dform"><![CDATA[dform]]></category>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#dform #jquery]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[204189454]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[126]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[網站製作學習誌 &raquo; [Web] 連結分享]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.jaceju.net/blog/archives/1562</wp:comment_author_url>
			<wp:comment_author_IP>220.133.101.128</wp:comment_author_IP>
			<wp:comment_date>2011-01-17 04:57:05</wp:comment_date>
			<wp:comment_date_gmt>2011-01-17 04:57:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Creating forms in JSON with jQuery [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Zakzag]]></wp:comment_author>
			<wp:comment_author_email>zakzag@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-17 10:51:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-17 10:51:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I admit, that if somebody likes jQuery, he/she want to use it for everything. In this case there's a much more useful and professional tool: Ext.js. can be mixed with jQuery]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[129988667]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-17 17:40:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-17 17:40:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I mentioned the Sencha ExtJS forms. ExtJS is a good framework, but there are cases where it is just too heavy to include (and one might not always want to include yet another framework using a different API approach - being able to mix is not necessarily always a good thing).

I wanted to follow a more jQuery friendly lightweight functional idea (similar to event listeners) and leave all the customization (no CSS framework except for the optional jQuery UI support) to the developer. I personally don't consider that a less professional solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[130129804]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-01-17 17:41:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-17 17:41:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I mentioned the Sencha ExtJS forms. ExtJS is a good framework, but there are cases where it is just too heavy to include (and one might not always want to include yet another framework using a different API approach - being able to mix is not necessarily always a good thing).

I wanted to follow a more jQuery friendly lightweight functional idea (similar to event listeners) and leave all the customization (no CSS framework except for the optional jQuery UI support) to the developer. I don't see what makes this a less professional solution.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[129988667]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[130130575]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>8</wp:comment_id>
			<wp:comment_author><![CDATA[Creating Forms | More More Pics]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://moremorepics.com/?p=15059</wp:comment_author_url>
			<wp:comment_author_IP>109.206.161.23</wp:comment_author_IP>
			<wp:comment_date>2011-02-18 21:37:22</wp:comment_date>
			<wp:comment_date_gmt>2011-02-18 21:37:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Creating forms in JSON with neyeon.com [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[tsenf]]></wp:comment_author>
			<wp:comment_author_email>thomas.senf@web.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-03-11 15:14:00</wp:comment_date>
			<wp:comment_date_gmt>2011-03-11 15:14:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thank you for this nice plug in. I can see a (somehow exotic?) use cases for it. 

Say you want to create automatically forms for business objects that you specify in a web application  and you want to give the user immediate feedback about it. So you can generate forms from abstract descriptions translated to JSON on the fly and display them immediately and than save it to a server for further use.

I like your lightweight approach. Congratulations!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[164108237]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>10</wp:comment_id>
			<wp:comment_author><![CDATA[jQuery form, 100 Best plugins, tools &amp; tutorials - DesignShock]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.webdesignshock.com/showcase/jquery-forms-plugins-tutorials/</wp:comment_author_url>
			<wp:comment_author_IP>207.58.148.170</wp:comment_author_IP>
			<wp:comment_date>2011-05-02 16:00:42</wp:comment_date>
			<wp:comment_date_gmt>2011-05-02 16:00:42</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Creating forms in JSON with jQuery [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>11</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>plzdontspammymail@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-18 20:32:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-18 20:32:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ Awesome, thanks! :) ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[206365484]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>15</wp:comment_id>
			<wp:comment_author><![CDATA[Radu Vulpescu]]></wp:comment_author>
			<wp:comment_author_email>radu.vulpescu@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-06-15 15:30:00</wp:comment_date>
			<wp:comment_date_gmt>2011-06-15 15:30:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great job starting this plugin. I was just feeling the need for such a plugin to use on my new project and was thinking I have to start one from scratch. 
Looking forward to experiment with dForm!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[226445428]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>16</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-06-15 15:35:00</wp:comment_date>
			<wp:comment_date_gmt>2011-06-15 15:35:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I hope it suits you needs! Visit the Google group 
http://groups.google.com/group/jquery-dform if you have questions and 
the Github page if you find bugs or want to contribute!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>15</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[226445428]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[226448456]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>17</wp:comment_id>
			<wp:comment_author><![CDATA[Stijn vc]]></wp:comment_author>
			<wp:comment_author_email>stijn.vancampenhout@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-07-12 12:38:00</wp:comment_date>
			<wp:comment_date_gmt>2011-07-12 12:38:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This looks nice! but can it make a json string out of the form (aka the other way around, form -&gt; json) ? I'm currently working on a implementation of smart lists (like the smart playlists in itunes, but here used to build an sql search query) in a javascript/php app and this would be perfect!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[249120737]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>18</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-07-13 15:29:00</wp:comment_date>
			<wp:comment_date_gmt>2011-07-13 15:29:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[No, the plugin only works one way. I'm not sure if I understand why you want to create the form JSON from an existing form?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>17</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[249120737]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[250837333]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>19</wp:comment_id>
			<wp:comment_author><![CDATA[Stijn vc]]></wp:comment_author>
			<wp:comment_author_email>stijn.vancampenhout@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-07-13 16:07:00</wp:comment_date>
			<wp:comment_date_gmt>2011-07-13 16:07:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So i can save the json string on the server into a sql database. When the user want's to edit the smartlist, it would be easy to create a form with the json string saved into the database. What i'm trying to do is save the form state into a database for:
1. generating a SQL query out of it
2. generating the exact same form for editing with all the fields filled in with the previous saved data.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>18</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[250837333]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[250858875]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>20</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-07-14 01:05:00</wp:comment_date>
			<wp:comment_date_gmt>2011-07-14 01:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't think you would need to reverse engineer the form. Why don't you give the user some kind of graphical frontend which creates the form JavaScript object / JSON and then you just add the values as "value" :  pairs from the generated form to that object?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>19</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[250858875]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[251636467]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>21</wp:comment_id>
			<wp:comment_author><![CDATA[Sondang Pangaribuan]]></wp:comment_author>
			<wp:comment_author_email>sondang.pangaribuan@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-23 23:42:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-23 23:42:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This suppot for jquery mobile ?
Thanks]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[294084264]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>22</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-25 16:57:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-25 16:57:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Haven't tried it yet, but I don't think I am using something that isn't 
supported in jQuery mobile. Feel free to try it and let me know how it 
went.

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[295238305]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>23</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-08-25 16:58:00</wp:comment_date>
			<wp:comment_date_gmt>2011-08-25 16:58:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[        Haven't tried it yet, but I don't think I am using something that isn't 
supported in jQuery mobile. Feel free to try it and let me know how it 
went.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>21</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[294084264]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[295238482]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>24</wp:comment_id>
			<wp:comment_author><![CDATA[harsha]]></wp:comment_author>
			<wp:comment_author_email>sriharshap@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-10-02 18:59:00</wp:comment_date>
			<wp:comment_date_gmt>2011-10-02 18:59:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[can i make it add more fields or field sets dynamically? ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[325125654]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-10-03 13:17:00</wp:comment_date>
			<wp:comment_date_gmt>2011-10-03 13:17:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not out of the box, but once created you can access the form with jQuery like you would with standard HTML. So you can just call buildform on sub elements.

]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[325526866]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>26</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-10-03 13:18:00</wp:comment_date>
			<wp:comment_date_gmt>2011-10-03 13:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Not out of the box, but once created you can access the form with jQuery
 like you would with standard HTML. So you can just call buildform on 
sub elements.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>24</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[325125654]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[325526959]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>27</wp:comment_id>
			<wp:comment_author><![CDATA[Mariusz]]></wp:comment_author>
			<wp:comment_author_email>maya@post.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-11-08 13:33:00</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 13:33:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi Daff,
Really nice plugin you've got here. I was actually thinking about writing something similiar to this on to be used with my form plugin (http://software-workshop.eu/content/bind2form-jquery-plugin) but I see that it's not going to make sense because you've already did gret job here. One question though - for my plugin I need to set a custom attribute - how can I do this in your plugin? For instance I need something like this
  - the bind attr is my custom one. How do I add it here?
]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[358343062]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-11-08 14:34:00</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 14:34:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Anything that is not registered as a custom extension (I called them subscribers - you can learn more about that in the extension chapter in the docs) will be added as an HTML attribute to the element. So a simple

{
    "type" : "text",
    "bind" : "Name"
}

should just do it. Just mentioning that custom attributes might create invalid markup though. Maybe you want to use the html 5 data attributes like data-bind="Name".]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>27</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[358343062]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[358376783]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>29</wp:comment_id>
			<wp:comment_author><![CDATA[Mariusz]]></wp:comment_author>
			<wp:comment_author_email>maya@post.pl</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-11-08 17:55:00</wp:comment_date>
			<wp:comment_date_gmt>2011-11-08 17:55:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks. Hmm, frankly I'll consider moving to the html5 data attribute. Thanks for pointing it out.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>28</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[358376783]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[358524520]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>32</wp:comment_id>
			<wp:comment_author><![CDATA[jQuery form, 100 Best plugins, tools &amp; tutorials | INFOXE]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.infoxe.com/resources/jquery-form-100-best-plugins-tools-tutorials/</wp:comment_author_url>
			<wp:comment_author_IP>184.22.234.218</wp:comment_author_IP>
			<wp:comment_date>2011-12-30 17:54:24</wp:comment_date>
			<wp:comment_date_gmt>2011-12-30 17:54:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Creating forms in JSON with jQuery [...] ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
	</item>
	<item>
		<title>Stealing JavaScript: jQuery UI</title>
		<link>http://neyeon.com/2011/01/stealing-javascript-jquery-ui/</link>
		<pubDate>Fri, 14 Jan 2011 19:15:55 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[When developing a JavaScript heavy application it is a good practice to  keep the source code into logically separated files. In production  however, transferring many full JavaScript source files with comments,  newlines etc. uses unnecessary bandwidth and requests, resulting in  longer loading times. This is where <a title="StealJS" href="http://javascriptmvc.com/#&amp;who=stealjs" target="_blank">StealJS</a> comes in. It is a build tool for JavaScript supporting dependency and package management, logging, JS and CSS concatenation and code generators. It is part of the great <a title="JavaScript MVC" href="http://javascriptmvc.com" target="_blank">JavaScriptMVC</a> framework but can also be used standalone.

<a title="jQuery UI homepage" href="http://jqueryui.com/" target="_blank">jQuery UI</a> is probably most popular user interface library for jQuery and a full compressed version has become quite heavy (almost 200Kb). Although the <a title="jQuery UI download page" href="http://jqueryui.com/download" target="_blank">download page</a> offers custom downloads where you can choose the components you want to include, I usually found myself end up using the full version, even if I didn't need all the components (the <a href="https://ajax.googleapis.com/ajax/libs/jqueryui/1.8.8/jquery-ui.min.js" target="_blank">Google CDN</a> version makes life easier). Especially with a larger JS codebase I prefer to get rid of unneeded code which is why I turned <a title="jQuery UI steal build" href="https://github.com/daffl/jqueryui" target="_blank">the jQuery UI modules into StealJS plugins</a>. Instead of creating a custom download on the jQuery UI page, that plugin architecture allows to create a jQuery UI build with a JavaScript configuration file.

To create a StealJS managed plugin create an empty folder and in that folder run
<blockquote>git clone https://github.com/jupiterjs/steal.git</blockquote>
to clone the most recent version of StealJS <a title="StealJS on GitHub" href="https://github.com/jupiterjs/steal" target="_blank">from GitHub</a> :

For the jQuery UI plugin you can use Steals getjs functionality that allows direct downloads:
<blockquote>steal/js steal/getjs https://github.com/daffl/jqueryui</blockquote>
For your Steal managed application create a folder and file <em>application/application.js</em> with the following content:

[source language="javascript"]
steal('https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js').
plugins('jqueryui/datepicker', 'jqueryui/dialog').then(function($) {
	$(document).ready(function() {
		$(&quot;.datepicker&quot;).datepicker();
		$(&quot;#dialog&quot;).dialog();
	});
});
[/source]

<em>Pluginify</em> creates a plugin version of that application:
<blockquote>steal/js steal/pluginifyjs application -destination production.js</blockquote>
Will then create a concatenated JavaScript file called production.js that includes the jQuery UI datepicker and dialog widgets, its dependencies and the application source. If you want to have a resizeable and moveable dialog just change

[source language="javascript"]
plugins('jqueryui/datepicker', 'jqueryui/dialog')
[/source]

to

[source language="javascript"]
plugins('jqueryui/datepicker', 'jqueryui/dialog',
    'jqueryui/resizable', 'jqueryui/droppable')
[/source]

If my <a title="My pull request for StealJS on github" href="https://github.com/jupiterjs/steal/pull/12" target="_blank">pluginify.js modification</a> gets accepted (alternatively you can use <a title="My StealJS fork" href="https://github.com/daffl/steal" target="_blank">my StealJS fork on GitHub</a>) a <em>compress</em> option will be available (uses the <a title="Google Closure Compiler" href="http://code.google.com/closure/compiler/" target="_blank">Google Closure Compiler</a> by default and reduces the production.js file size from 180Kb to 98Kb):
<blockquote>steal/js steal/pluginifyjs application -destination production.js -compress</blockquote>
To use the development file (application/application.js) file use

[source language="html"]
&lt;script type='text/javascript'
                src='../../steal/steal.js?steal[app]=application&amp;steal[env]=development'
                package='main.js'
                compress='false'&gt;
[/source]

in the HTML files (has to link to steal.js or steal.production.js). Also check out the other parts of <a title="JavaScript MVC homepage" href="http://javascriptmvc.com/" target="_blank">JavaScript MVC</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2011-01-14 19:15:55</wp:post_date>
		<wp:post_date_gmt>2011-01-14 19:15:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>stealing-javascript-jquery-ui</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="javascript"><![CDATA[javascript]]></category>
		<category domain="post_tag" nicename="javascriptmvc"><![CDATA[javascriptmvc]]></category>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="post_tag" nicename="jquery-ui"><![CDATA[jquery-ui]]></category>
		<category domain="category" nicename="tutorials"><![CDATA[Tutorials]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[209271310]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[149]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[PatrickR]]></wp:comment_author>
			<wp:comment_author_email>fornax10@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-02-03 03:01:00</wp:comment_date>
			<wp:comment_date_gmt>2011-02-03 03:01:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi, 
have you got pluginify working with views? Or is the above just for a pure js plugin?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[139199112]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-02-03 03:05:00</wp:comment_date>
			<wp:comment_date_gmt>2011-02-03 03:05:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I haven't tried views yet, but the build process should similar to building an application with Steal. Did you run into problems? I started documenting pluginify and will try the view parts. I hope the documentation can be pulled into the upstream soon.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>6</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[139199112]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[139200993]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Feathry: RESTful extensions for the Zend Framework</title>
		<link>http://neyeon.com/?p=157</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=157</guid>
		<description></description>
		<content:encoded><![CDATA[Having web applications offer a <a title="Representational State Transfer" href="http://en.wikipedia.org/wiki/Representational_State_Transfer" target="_blank">REST</a> API is becoming more and more popular. Almost every day you can read about what REST is about and - because there seem to be some misunderstandings around - <a title="Roy T. Fielding on what REST is not" href="http://roy.gbiv.com/untangled/2008/rest-apis-must-be-hypertext-driven" target="_blank">what it is not</a>.

Especially in PHP the choice of frameworks that help you enforce the REST constraints is still rather limited (the <a title="Implementing Rest Framework language matrix" href="http://code.google.com/p/implementing-rest/wiki/ByLanguage" target="_blank">Implementing Rest language matrix</a> lists a total of three PHP frameworks) and when using one of the established frameworks, migrating a web application is not always possible. The <a href="http://framework.zend.com/" target="_blank">Zend Framework</a> had a particularly bad start in trying to support a RESTful architecture with the <a href="http://framework.zend.com/manual/en/zend.rest.html" target="_blank">Zend_Rest_Client and Zend_Rest_Server</a> which provide nothing more than an RPC mechanism via HTTP. It improved]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2011-01-29 18:54:22</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>feathry-zf-extensions</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="php-feathry-rest"><![CDATA[php feathry rest]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#rest #feathry #zf]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>ZFMustache - Mustache views for the Zend framework</title>
		<link>http://neyeon.com/2011/04/zfmustache-mustache-views-for-the-zend-framework/</link>
		<pubDate>Thu, 28 Apr 2011 05:07:07 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://mustache.github.com/" target="_blank">Mustache</a> is a language independent templating engine that keeps templates as easy and portable as possible. Combined with anonymus functions the simple collection of tags covers many different use cases.

Using the great <a href="https://github.com/bobthecow/mustache.php" target="_blank">Mustache.PHP</a> implementation with the branch for higher order functions (supporting PHP 5.3 <a href="http://php.net/manual/en/functions.anonymous.php" target="_blank">anonymus functions</a>) I created a view wrapper and application resource called <a href="https://github.com/daffl/zfmustache" target="_blank">ZFMustache</a> that enables mustache based views for the <a href="http://framework.zend.com/" target="_blank">Zend Framework</a>. The following post is pretty much the documentation readme but it seemed worth a blog entry as well:

<strong>Installation</strong>

You can clone the GIT repository directly in your library folder:
<blockquote>cd myapp
git clone git@github.com:daffl/zfmustache.git -b zfmustache library/Mustache</blockquote>
Or add it as a GIT submodule to your existing repository:
<blockquote>git submodule add git@github.com:daffl/zfmustache.git -b zfmustache library/Mustache
git submodule init</blockquote>
<strong>Use it</strong>

The application resource will instantiate the view, set the Mustache engine autoloader
and update the view renderer (unless enabled is set to false).
Add the following to your *application.ini* to enable mustache views:

<code>	pluginpaths.Mustache_Application_Resource = "Mustache/Application/Resource"
	resources.mustache.basePath = APPLICATION_PATH "/views/scripts"</code>
	
A controller action can use the view as usual. It will now render
view scripts with the .mustache extension though:

[source language="php"]
		class IndexController extends Zend_Controller_Action
		{
			public function indexAction()
			{
		        $this-&gt;view-&gt;planet = &quot;Mars&quot;;
		        // Using a PHP 5.3 lambda function to render bold Text:
		        $engine = $this-&gt;view-&gt;getEngine();
		        $this-&gt;view-&gt;bold = function($text) use($engine) {
		        	return &quot;&lt;strong&gt;&quot; . $engine-&gt;render($text) . &quot;&lt;/strong&gt;&quot;;
		        };
			}
		} 
[/source]

You can also use mustache views only in specific controllers or actions. In that case
setting the view renderer has to be disabled:

<code>	pluginpaths.Mustache_Application_Resource = "Mustache/Application/Resource"
	resources.mustache.basePath = APPLICATION_PATH "/views/scripts"
	resources.mustache.enabled = false</code>

After that the mustache view instance can be retrieved and set in any controller:

[source language="php"]
		class IndexController extends Zend_Controller_Action
		{
			public function init()
			{
		    	$bootstrap = $this-&gt;getInvokeArg('bootstrap');
				$this-&gt;view = $bootstrap-&gt;getResource('mustache');
				$viewRenderer = $this-&gt;_helper-&gt;getHelper('viewRenderer');
				$viewRenderer-&gt;setView($this-&gt;view)-&gt;setViewSuffix('mustache');
			}

			public function indexAction()
			{
		        // action body
		        $this-&gt;view-&gt;planet = &quot;Mars&quot;;
		        // Using a PHP 5.3 lambda function to render bold Text:
		        $engine = $this-&gt;view-&gt;getEngine();
		        $this-&gt;view-&gt;bold = function($text) use($engine) {
		        	return &quot;&lt;strong&gt;&quot; . $engine-&gt;render($text) . &quot;&lt;/strong&gt;&quot;;
		        };
			}
		}
[/source]

<strong>A mustache file</strong>

Create a file called APPLICATION_PATH/scripts/views/index/index.mustache e.g. like this:

[source language="html"]
&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot; &quot;http://www.w3.org/TR/html4/loose.dtd&quot;&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;title&gt;Mustache Test&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello {{planet}}!&lt;/h1&gt;
        Hello {{#bold}}bold {{planet}}{{/bold}}
    &lt;/body&gt;
&lt;/html&gt;
[/source] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2011-04-28 05:07:07</wp:post_date>
		<wp:post_date_gmt>2011-04-28 05:07:07</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>zfmustache-mustache-views-for-the-zend-framework</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="zend-zendframework-mustache"><![CDATA[#zend #zendframework #mustache]]></category>
		<category domain="category" nicename="projects"><![CDATA[Projects]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[290240405]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_thumbnail_id</wp:meta_key>
			<wp:meta_value><![CDATA[170]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>12</wp:comment_id>
			<wp:comment_author><![CDATA[Kev Burns]]></wp:comment_author>
			<wp:comment_author_email>kevburnsjr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kevburnsjr.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-22 19:47:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-22 19:47:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What about layouts? ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[209523050]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[]]></wp:comment_author>
			<wp:comment_author_email>daff@neyeon.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-22 21:18:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-22 21:18:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Mustache uses partials (in http://mustache.github.com/mustache.5.html) which I think would be the way to do layouts.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[209564802]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>14</wp:comment_id>
			<wp:comment_author><![CDATA[Kev Burns]]></wp:comment_author>
			<wp:comment_author_email>kevburnsjr@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://kevburnsjr.com</wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2011-05-23 19:27:00</wp:comment_date>
			<wp:comment_date_gmt>2011-05-23 19:27:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[ I'm talking about Zend_Layout]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>dsq_parent_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>dsq_post_id</wp:meta_key>
				<wp:meta_value><![CDATA[210048025]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Extending jQuery.dform</title>
		<link>http://neyeon.com/?p=177</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=177</guid>
		<description></description>
		<content:encoded><![CDATA[// TODO]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>177</wp:post_id>
		<wp:post_date>2011-06-11 04:13:13</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>JS.Class - A class framework for NodeJS</title>
		<link>http://neyeon.com/?p=181</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[-]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2011-07-05 18:30:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The state of PHP dependency injection</title>
		<link>http://neyeon.com/?p=186</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=186</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>186</wp:post_id>
		<wp:post_date>2011-10-03 19:17:22</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Customize jQuery .val() with $.valHooks</title>
		<link>http://neyeon.com/2011/11/customize-jquery-val-with-valhooks/</link>
		<pubDate>Mon, 28 Nov 2011 19:48:02 +0000</pubDate>
		<dc:creator>D.Luecke</dc:creator>
		<guid isPermaLink="false">http://neyeon.com/?p=187</guid>
		<description></description>
		<content:encoded><![CDATA[When creating custom widgets that should act as form inputs it might be helpful to overwrite the behaviour of the <a href="http://api.jquery.com/val/">jQuery .val()</a> method. This is where the $.valHooks object can be used but as mentioned on <a href="http://stackoverflow.com/questions/6731153/what-are-jquery-valhooks">this question on Stackoverflow</a> there is not a lot of documentation. Here is a quick example that creates a custom myedit plugin that reads and sets the value of a div:

<iframe style="width: 100%; height: 400px" src="http://jsfiddle.net/Daff/sJU2J/2/embedded/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date>2011-11-28 19:48:02</wp:post_date>
		<wp:post_date_gmt>2011-11-28 19:48:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>customize-jquery-val-with-valhooks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_aktt_hash_meta</wp:meta_key>
			<wp:meta_value><![CDATA[#jquery #forms]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_notify_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[yes]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>aktt_tweeted</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>dsq_thread_id</wp:meta_key>
			<wp:meta_value><![CDATA[486652340]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
